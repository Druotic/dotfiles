eval "$(/opt/homebrew/bin/brew shellenv)"
eval "$(pyenv init --path)"

# Load environment variables from .env.defaults (committed to repo)
# and optionally from .env (local overrides, gitignored)
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
if [[ -f "$SCRIPT_DIR/.env.defaults" ]]; then
  source "$SCRIPT_DIR/.env.defaults"
fi
if [[ -f "$SCRIPT_DIR/.env" ]]; then
  source "$SCRIPT_DIR/.env"
fi

# pre-load for antidote/zsh plugin management
autoload -Uz compinit
compinit

alias an="av next"
alias ap="av prev"

#alias date=gdate
alias python=python3
alias "gtc"="git commit --no-verify"
alias git-recent="git for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'"
alias git-rm-remote-tag="git push --delete origin"

alias jsonFileToEscapedString="node -e \"require('assert')(process.argv[1]); const file = require(process.argv[1]); console.log(JSON.stringify(JSON.stringify(file)))\""
alias untgz='tar -xvzf'

alias fuckYarn="sed -i '' 's/registry.yarnpkg.com/registry.npmjs.org/g'"
alias commitFuckYarn="git commit -am \"s/registry.yarnpkg.com.com/registry.npmjs.org/g yarn.lock\""

alias cds="cd ~/repos/$COMPANY/"
alias cdp='cd ~/repos/public/'
alias cdd='cd ~/repos/public/dotfiles/'
alias cdf="cd ~/repos/$COMPANY/$PATH_TO_MAIN_SERVICE"

cdc () {
    cd "$(ls -d ~/repos/$COMPANY-clone-* | sort | tail -n 1)" && cd "$COMPANY/$PATH_TO_MAIN_SERVICE"
}

alias zshrc='vim ~/repos/public/dotfiles/zsh/zshrc'
alias gitsb='git checkout main && git pull origin main && git checkout - && git merge main && git push origin'

alias vim=nvim
alias gremlin='~/.apache-tinkerpop-gremlin-console-3.6.5/bin/gremlin.sh'

alias nr='npm run'

alias neo4j_redact_from_pbpaste='pbpaste | sed -E '\''s/\$param[0-9]+/"REDACTED"/g'\'''

#alias neo4j_redact_from_pbpaste='pbpaste | sed -E "s/\\$param[0-9]+/\"REDACTED\"/g"'
#alias neo4j_redact_from_pbpaste='pbpaste | sed -E "s/\$param[0-9]+/"REDACTED"/g'
#alias neo4j_redact_from_pbpaste='pbpaste | sed -E "s/\$param[0-9]+/REDACTED/g" | pbcopy'

updateAll () {
  # alectrona
  sudo patch update-all
}

recoverNRDashboard () {
  curl -X POST https://api.newrelic.com/graphql \
       -H 'Content-Type: application/json' \
       -H "API-Key: $NR_API_KEY" \
       -d "{ \
    \"mutation\": \"{ \
      dashboardUndelete(guid: "$1") { \
        errors { \
          description \
          type \
        } \
      } \
    }\" \
  }"
}

ds () {
  FLAG="$1"
  CONTAINERS=($(docker ps -aq))
  if [ ${#CONTAINERS[@]} -gt 0 ]; then
    docker stop -t 3 "${CONTAINERS[@]}"
    docker rm "${CONTAINERS[@]}"
  fi

  if  [[ "$FLAG" == '--prune' ]]; then
    docker system prune --volumes -a
    docker volume rm $(docker volume ls -q)
  fi
}

dockerPrune () {
  ds --remove
  docker volume prune -a -f
  docker system prune -a -f
}

clone-org-gh-repos () {
  local clone_dir="$COMPANY-clone-$(date '+%Y-%m-%d_%H.%M.%S')"
  pushd ~/repos
  mkdir $clone_dir
  pushd $clone_dir
  gh repo list $COMPANY --limit 1000 | while read -r repo _; do
    gh repo clone "$repo" "$repo"
  done
  popd
  popd
}

clone-org-gh-fusion () {
  local clone_dir="$COMPANY-clone-$(date '+%Y-%m-%d_%H.%M.%S')"
  pushd ~/repos
  mkdir $clone_dir
  pushd $clone_dir
  gh repo clone "$COMPANY/$DEFAULT_REPO_NAME" "$COMPANY/$DEFAULT_REPO_NAME"
  popd
  popd
}

unlinkPackage () {
  echo "Unlinking $1..."
  pushd ~/.config/yarn/link/$1
  ls
  yarn unlink
  popd
}

# Repeat command ($2) $1 times, exit early if failure
repeat-it () {
  RE='^[0-9]+$' 
  COUNT=$1
  CMD="$2"
  if ! [[ $COUNT =~ $RE ]] ; then
    echo "First arg must be a number, found '$COUNT'"
    return 1
  fi
  shift
  echo "Executing the following command $COUNT times: '$CMD'"
  for i in `seq 1 $COUNT`; do eval "$CMD" || return ; done
}

# cmd must be wrapped in quotes
# Repeat command ($2) $1 times, exit early if failure
repeat-it-count-failures () {
  RE='^[0-9]+$' 
  COUNT=$1
  CMD="$2"
  if ! [[ $COUNT =~ $RE ]] ; then
    echo "First arg must be a number, found '$COUNT'"
    return 1
  fi
  shift
  FAIL_COUNT=0
  echo "Executing the following command $COUNT times: '$CMD'"
  for i in `seq 1 $COUNT`
  do
    echo "Starting run #${i} (${FAIL_COUNT}/${i} failed so far)..."
    eval "$CMD"
    if [[ $? == 1 ]]; then
      echo "Failure detected in run #${i}"
      let "FAIL_COUNT++"
    fi
  done
  echo "All done. $FAIL_COUNT/$COUNT failures detected."
}

# $1 - ag basic search pattern, $2 - sed expression
# recursively replaces file contents
superSed () {
  rg -l "$1" . | xargs sed -i -E "$2"
}

json_escape () {
    printf '%s' "$1" | node 
    printf '%s' "$1" | python -c 'import json,sys; print(json.dumps(sys.stdin.read()))'
}

port_in_use () {
  echo "Checking if port $1 is in use..."
  output="$(lsof -nP -iTCP:$1 | grep LISTEN)"
  if [[ "$?" == "1" ]]; then
    echo "Port $1 not in use."
  else
    echo "lsof output for port $1:"
    echo "$output"
  fi
}

reload_audio () {
  #sudo kextunload /System/Library/Extensions/AppleHDA.kext
  #sudo kextload /System/Library/Extensions/AppleHDA.kext
  sudo pkill coreaudiod
}

npm_reauth_ro () {
  npm login --auth-type legacy
  npm token create --read-only
  npm token list
  echo "revoke all other tokens with 'npm token revoke <blah>'"
  echo "then copy the above token into ~./npmrc"
}

git_sync_upstream () {
  git checkout main && git pull origin main && git checkout - && git rebase main
}

alias audio_get_inputs='SwitchAudioSource -t input -a'
alias audio_set_input='SwitchAudioSource -t input -s'
alias audio_get_outputs='SwitchAudioSource -t output -a'
alias audio_set_output='SwitchAudioSource -t output -s'


# linux
#set_active_audio_devices () {
  #local input="alsa_input.usb-Generic_Blue_Microphones_2051BAB09SA8-00.analog-stereo"
  #local output="alsa_output.usb-CMEDIA_USB2.0_High-Speed_True_HD_Audio-00.analog-stereo"

  #echo "\n\nAudio INPUTS:"
  #pactl list sources short
  #echo "\nAudio OUTPUTS:"
  #pactl list sinks short

  #echo "\nSetting input $input"
  #echo "Setting output $output\n"
  #pactl set-default-source "$input"
  #pactl set-default-sink "$output"
#}


[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
#fpath=(~/.zsh $fpath)

# History - handled by OMZsh now
## Appends every command to the history file once it is executed
#setopt inc_append_history
## Reloads the history whenever you use it
#setopt share_history
#setopt hist_ignore_all_dups inc_append_history

# ctrl+left
bindkey "^[[1;5D" backward-word
# ctrl+right
bindkey "^[[1;5C" forward-word
# search back
bindkey "^R" history-incremental-search-backward

#set_active_audio_devices

# load zsh lplugins (~/.zsh_plugins.txt)
source $(brew --prefix)/opt/antidote/share/antidote/antidote.zsh
antidote load

# useful for heavy i/o, file watching, etc running in parallel
ulimit -n 65536

if [[ "$(uname)" = 'Linux' ]]; then
  # linux uses portable appimage
  alias nvim='~/nvim.appimage'

  # OSX-isms to make OSX-centric instructions less painful to work around
  alias pbcopy='xclip -selection clipboard'
  alias pbpaste='xclip -selection clipboard -o'
  alias open='xdg-open'

  # misc linux-specific cruft aliases
  purge-old-kernels () {
    sudo apt-get purge $(dpkg -l linux-{image,headers}-"[0-9]*" | awk '/ii/{print $2}' | grep -ve "$(uname -r | sed -r 's/-[a-z]+//')")
  }
fi
